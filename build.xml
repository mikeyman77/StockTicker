<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="StockTicker Project" default="all" basedir=".">

    <property name="src.dir" value="src${file.separator}main${file.separator}java" description="project source code"/>
    <property name="src-test.dir" value="src${file.separator}test${file.separator}java" description="project test code"/>
    <property name="lib.dir" value="lib" description="project libraries are found here"/>
    <property name="build.dir" value="build"
              description="anything this build script generates goes under this directory"/>
    <property name="classes.dir" value="${build.dir}${file.separator}classes"
              description="Java class files compiled by this build script  go here"/>
    <property name="report.dir" value="${build.dir}${file.separator}report"
              description="this directory is for all reports - xml and html"/>
    <property name="report.junit.dir" value="${report.dir}${file.separator}junit"
              description="this directory is used by JUnit. Test results are placed here in a nice HTML format"/>
    <property name="inmemory.db.dir" value="data/mem" description="location of inmemory db files wiped out each run" />

    <!-- cobertura properties -->
    <property name="cobertura.home" value="lib"/>
    <property name="cobertura.instrumented.dir" value="${build.dir}${file.separator}instrumented" />
    <property name="cobertura.reports.dir" value="${report.dir}${file.separator}coverage" />
    <property name="cobertura.junit.xml.dir" value="${cobertura.reports.dir}${file.separator}junit-xml" />
    <property name="cobertura.junit.html.dir" value="${cobertura.reports.dir}${file.separator}junit-html" />
    <property name="cobertura.coverage.html.dir" value="${cobertura.reports.dir}${file.separator}cobertura-html" />
    <property name="cobertura.data.file" value="cobertura.ser" />
    <property name="cobertura.jar.file" value="${lib.dir}${file.separator}cobertura-2.0.3.jar" />

    <!-- this sets up the classpath for the project. Whenever you a .jar to the lib directory it will automatically be
        be added to the classpath
    -->
    <path id="project.classpath" description="the project's class path all third party libs are on it. ">
        <pathelement path="${classes.dir}"/>
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>


    <!-- targets follow - each target does one thing in the compile, run, test and build process -->

    <target name="clean" description="deletes all build artifacts (anything created by this build file)">
        <delete dir="${classes.dir}"/>
        <delete dir="${build.dir}"/>
        <delete dir="${inmemory.db.dir}"/>
    </target>

    <target name="init" description="Build initialization - create output directories" depends="clean">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${classes.dir}"/>
    </target>

    <target name="compile" description="Compile all the code; produce classes" depends="init">
        <javac destdir="${classes.dir}" debug="true" fork="true" debuglevel="vars,lines,source" deprecation="on" includeantruntime="false">
            <src path="${src.dir}"/>
            <src path="${src-test.dir}"/>
            <classpath refid="project.classpath"/>
            <compilerarg line="-Xlint:unchecked" />
        </javac>
    </target>

    <target name="javadoc" description="Generate source JavaDoc" depends="compile">
        <javadoc packagenames="com.stockticker.*"
                 classpathref="project.classpath"
                 sourcepath="src/main/java"
                 excludepackagenames=""
                 defaultexcludes="yes"
                 destdir="doc/api"
                 author="true"
                 version="true"
                 use="true"
                 windowtitle="Test API">
            <doctitle><![CDATA[<h1>StockTicker</h1>]]></doctitle>
            <bottom><![CDATA[Final Project - Stock Ticker - Stu Connall, Mike Grissom, and Paul Wallace]]></bottom>
            <tag name="todo" scope="all" description="To do:"/>
            <group title="Stock Ticker Common" packages="com.stockticker*"/>
            <group title="Stock Ticker User Interface" packages="com.stockticker.ui*"/>
            <group title="Stock Ticker Business Logic" packages="com.stockticker.logic*"/>
            <group title="Stock Ticker Persistence" packages="com.stockticker.persistence*"/>
            <link offline="true" href="http://docs.oracle.com/javase/7/docs/api/" packagelistLoc="\temp:\tmp"/>
            <link href="http://docs.oracle.com/javase/7/docs/api/"/>
        </javadoc>
    </target>

    <target name="test" description="Runs all the JUnit tests and generates the test results report" depends="compile">

        <delete dir="${report.junit.dir}" />
        <mkdir dir="${report.junit.dir}" />
        <junit printsummary="yes" haltonfailure="false" showoutput="true" failureproperty="test_failure">
            <classpath refid="project.classpath"/>

            <formatter type="xml"/>

            <batchtest fork="yes" todir="${report.junit.dir}">
                <fileset dir="${src-test.dir}">
                    <include name="**/*Test*.java"/>
                </fileset>

            </batchtest>
        </junit>

        <junitreport todir="${report.junit.dir}">
            <fileset dir="${report.junit.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${report.junit.dir}${file.separator}html"/>
        </junitreport>

        <!-- if a test fails then the property  "test_failure" will be set and we fail now.
         Failng now, rather than when the test actually failed allows all the tests to complete and the report
         to be generated.
         -->
        <fail if="test_failure" message="At least one JUnit test failed. Please see report."/>

    </target>

    <target name="coverage" depends="compile">

        <delete dir="${cobertura.instrumented.dir}"/>
        <delete dir="${cobertura.reports.dir}"/>
        <delete file="cobertura.ser" />
        <!-- cobertura directories -->
        <mkdir dir="${cobertura.instrumented.dir}" />
        <mkdir dir="${cobertura.junit.xml.dir}" />
        <mkdir dir="${cobertura.junit.html.dir}" />
        <mkdir dir="${cobertura.coverage.html.dir}" />

        <path id="cobertura.classpath">
            <fileset dir="${cobertura.home}">
                <include name="cobertura-2.0.3.jar"/>
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${lib.dir}">
                <include name="**/*.jar"/>
            </fileset>
        </path>
        <taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>

        <cobertura-instrument todir="${cobertura.instrumented.dir}" datafile="${cobertura.data.file}" ignoreTrivial="true" >
            <ignore regex="org.apache.log4j.*" />
            <fileset dir="${classes.dir}">
                <include name="**/*.class"/>
                <exclude name="**/*Test.class"/>
                <exclude name="**/*$*.class"/>
            </fileset>
        </cobertura-instrument>

        <junit showoutput="true" printsummary="withOutAndErr" fork="true" forkmode="once" failureproperty="test.failed">
            <classpath refid="cobertura.classpath" />
            <sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.data.file}" />

            <classpath location="${cobertura.instrumented.dir}" />
            <classpath location="${classes.dir}"/>
            <classpath location="${lib.dir}"/>
            <formatter type="xml" />
            <batchtest todir="${cobertura.junit.xml.dir}/">
                <fileset dir="${src-test.dir}">
                    <include name="**/*Test*.java"/>
                    <exclude name="**/*$*.class"/>
                </fileset>
            </batchtest>
        </junit>

        <junitreport todir="${cobertura.junit.html.dir}">
            <fileset dir="${cobertura.junit.xml.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${cobertura.junit.html.dir}"/>
        </junitreport>

        <cobertura-report format="html" destdir="${cobertura.coverage.html.dir}" datafile="${cobertura.data.file}">
            <fileset dir="${src.dir}">
                <include name="**/*.java" />
                <exclude name="**/*$*.class"/>
            </fileset>
        </cobertura-report>
    </target>

    <!-- this is the default target - it does everything -->
<!--    <target name="all" depends="init, clean, compile, test, instrument, cover-test, coverage-report"-->
    <target name="all" depends="init, clean, compile, javadoc, test, coverage"
            description="deletes previous work, compiles new class, runs hello program"/>

</project>
